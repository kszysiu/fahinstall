#!/bin/bash -e
#
# fahinstall 2.4
# Folding@Home install script
# 

usage()
{
	echo Usage:
	echo -e \\t$0 [-U] [-G] [-b \<branch\>]
	echo -e \\t$0 -V
	echo -e \\t$0 -h
}

#
# download a file
# syntax: download <URL> [<output-file-name>]
#
download()
{
	local CURL_PARAM

	[ -z "$1" ] && return 1
	if which wget > /dev/null 2>&1 ; then
		wget -nv ${2:+-O $2} "$1" || return $?
	else
		[ -z "$2" ] && CURL_PARAM="-O" || CURL_PARAM="-o $2"
		curl -f -s -S -R -L $CURL_PARAM "$1" || return $?
	fi
	return 0
}

#
# Parse command-line options
#
OPT_VERSION=
OPT_USAGE=
OPT_NOUPDATE=
OPT_NOGRUBUPDATE=
OPT_BRANCH=

while [ -n "$1" ]; do
	case $1 in
		(-V)
			OPT_VERSION=1
			shift
			;;
		(-h)
			OPT_USAGE=1
			shift
			;;
		(-U)
			OPT_NOUPDATE=1
			shift
			;;
		(-G)
			OPT_NOGRUBUPDATE=1
			shift
			;;
		(-b)
			shift
			if [ -z "$1" -o "${1:0:1}" = "-" ]; then
				echo ERROR: option -b requires an argument
				exit 1
			fi
			OPT_BRANCH=$1
			shift
			;;
		(-*)
			echo ERROR: invalid option -- $1
			exit 1
			;;
		(*)
			break
			;;
	esac
done

if [ -n "$1" ]; then
	echo ERROR: excess argument -- $1
	exit 1
fi

#
# Set OPT_NORMAL if any regular (non -h -V) options are set
#
[ -n "$OPT_NOUPDATE" ] && OPT_NORMAL=1
[ -n "$OPT_NOGRUBUPDATE" ] && OPT_NORMAL=1
[ -n "$OPT_BRANCH" ] && OPT_NORMAL=1

#
# Check for command-line option conflicts
#
if [ -n "$OPT_VERSION$OPT_USAGE$OPT_NORMAL" -a "$OPT_VERSION$OPT_USAGE$OPT_NORMAL" != "1" ]; then
	echo ERROR: conflicting arguments
	exit 1
fi

#
# Process command-line options
#
[ -n "$OPT_USAGE" ] && usage && exit 0
[ -n "$OPT_VERSION" ] && echo fahinstall 2.4 && exit 0
HARDOCP_BRANCH=$OPT_BRANCH

[ -z "$HARDOCP_BRANCH" ] && HARDOCP_BRANCH=released

#
# Configure repositories
#
FAHBACKUP_REPO=https://raw.github.com/team33/fahbackup/$HARDOCP_BRANCH
FAHDIAG_REPO=https://raw.github.com/team33/fahdiag/$HARDOCP_BRANCH
FAHINSTALL_REPO=https://raw.github.com/team33/fahinstall/$HARDOCP_BRANCH

#
# Produce appropriate message on premature exit
#
trap "echo Premature exit." ERR

#
# Impose a requirement on script's name
#
if [ "$(basename $0)" != "fahinstall" ]; then
	echo ERROR: this code needs to be called as \'fahinstall\'
	exit 1
fi

if [ "$(id -ru)" != "0" ]; then
	echo ERROR: need root privileges. Run with sudo.
	exit 1
fi

if [ -n "$OPT_NOUPDATE" ]; then 
	echo ==== Not checking for updates
else
	echo ==== Checking for updates \($HARDOCP_BRANCH\)...
	A=$(download $FAHINSTALL_REPO/fahinstall - | md5sum - | cut -f 1 -d \ )
	B=$(md5sum $0 | cut -f 1 -d \ )
	if [ "$A" != "$B" ]; then
		echo  NOTICE: newer version of fahinstall may be available
		echo "        and will be downloaded automatically"
		echo
		if [ -t 0 ]; then
			echo  Press Ctrl+C to exit or Enter to proceed.
			if ! read I ; then
				exit 1
			fi
		fi
		download $FAHINSTALL_REPO/fahinstall /tmp/$(basename $0)-$SUDO_USER.$$
		mv $0 $0-prev
		cp -a $0-prev $0
		cat /tmp/$(basename $0)-$SUDO_USER.$$ > $0
		rm /tmp/$(basename $0)-$SUDO_USER.$$
		sync
		. $0 -b $HARDOCP_BRANCH
		exit 0
	fi
fi

if [ -z "$SUDO_USER" ]; then
	echo ERROR: SUDO_USER variable not set, cannot continue.
	exit 1
fi

if [ "$SUDO_USER" = "fah" -o "$SUDO_USER" = "root" ]; then
	echo ERROR: user \'$SUDO_USER\' not supported. Create another user and try again.
	exit 1
fi

TARGET=$(eval echo ~$SUDO_USER/fah)


#install software
echo ==== Installing required software, this may take a few minutes ...
if which apt-get > /dev/null 2>&1 ; then
	PACKAGES_DEBIAN="openssh-server screen samba mcelog pastebinit build-essential"
	if ! apt-get install -qq $PACKAGES_DEBIAN ; then
		# If installation fails -- update package indices and retry
		apt-get update -qq
		apt-get install -qq $PACKAGES_DEBIAN
	fi
fi
which yum > /dev/null 2>&1 && yum -y -q install tar bzip2 screen samba mcelog gcc make

echo ==== Applying OS tweaks ...

#
# Disable ondemand scaling governor
#
which update-rc.d > /dev/null 2>&1 && update-rc.d ondemand disable 2> /dev/null || true

#
# Disable irqbalance: try upstart, LSB and systemd methods
#
[ -f /etc/default/irqbalance ] && sed -i -e 's/^ENABLED.*$/ENABLED="0"/' /etc/default/irqbalance && sync
which chkconfig > /dev/null 2>&1 && chkconfig irqbalance off 2> /dev/null || true
which systemctl > /dev/null 2>&1 && systemctl disable irqbalance 2> /dev/null || true

#
# Update sysctl configuration
#
awk '/#\[H]ardOCP/ { next } /^# \[H]ardOCP begins/ { P = 1 } { if (P != 1) print } /^# \[H]ardOCP ends/ { P = 0 }' /etc/sysctl.conf > /tmp/sysctl.conf-$SUDO_USER.$$ || true
mv /tmp/sysctl.conf-$SUDO_USER.$$ $(readlink -e /etc/sysctl.conf)
sync
if [ -d /etc/sysctl.d ]; then
	SYSCTL_CONF=/etc/sysctl.d/99-fah.conf
	echo -n > $SYSCTL_CONF
else
	SYSCTL_CONF=/etc/sysctl.conf
fi
echo "# [H]ardOCP begins" >> $SYSCTL_CONF
echo "kernel.randomize_va_space=0" >> $SYSCTL_CONF
echo "kernel.panic=3600" >> $SYSCTL_CONF
echo "kernel.print-fatal-signals=1" >> $SYSCTL_CONF
echo "# [H]ardOCP ends" >> $SYSCTL_CONF
sync

# Disable automatic updates
if [ -f /etc/apt/apt.conf.d/10periodic ]; then
	awk '/^(APT::Periodic::Update-Package-Lists|APT::Periodic::Unattended-Upgrade) / { next } { print } END { print "APT::Periodic::Update-Package-Lists \"0\";" ; print "APT::Periodic::Unattended-Upgrade \"0\";" }' /etc/apt/apt.conf.d/10periodic > /tmp/10periodic-$SUDO_USER.$$
	mv /tmp/10periodic-$SUDO_USER.$$ $(readlink -e /etc/apt/apt.conf.d/10periodic)
	sync
fi

# Disable autostart of update notifier (Ubuntu)
if [ -f /etc/xdg/autostart/update-notifier.desktop ]; then
	awk '/^(NoDisplay|X-GNOME-Autostart-enabled)=/ { next } { print } END { print "NoDisplay=false" ; print "X-GNOME-Autostart-enabled=false" }' /etc/xdg/autostart/update-notifier.desktop > /tmp/update-notifier.desktop-$SUDO_USER.$$
	mv /tmp/update-notifier.desktop-$SUDO_USER.$$ $(readlink -e /etc/xdg/autostart/update-notifier.desktop)
	sync
	killall update-notifier 2> /dev/null || true
fi

# update grub configuration: do not hide menu, decrease default timeout, use text mode
if [ -f /etc/default/grub ]; then
	cat /etc/default/grub | awk 'BEGIN { print "GRUB_GFXMODE=text" ; print "GRUB_TIMEOUT=5" } $1 ~ /^(GRUB_GFXMODE|GRUB_TIMEOUT|GRUB_HIDDEN_TIMEOUT|GRUB_HIDDEN_TIMEOUT_QUIET)(=.*$|$)/ { next } { print }' | sed '/^[[:space:]]*GRUB_CMDLINE_LINUX_DEFAULT[[:space:]]*=/{s/([[:space:]"])(splash)([[:space:]"])/\1\3/g;s/([[:space:]"])(quiet)([[:space:]"])/\1\3/g}' > /tmp/grub-$SUDO_USER.$$
	if ! diff /tmp/grub-$SUDO_USER.$$ /etc/default/grub > /dev/null ; then
		cp --preserve /etc/default/grub /etc/default/grub-horde-$(date +%s).$$
		mv /tmp/grub-$SUDO_USER.$$ $(readlink -e /etc/default/grub)
		sync
		if [ -z "$OPT_NOGRUBUPDATE" ]; then
			update-grub
			sync
		fi
	fi
fi


#update fstab
echo ==== Configuring fstab...
grep -v "$TARGET" /etc/fstab > /tmp/fstab-$SUDO_USER.$$
echo "tmpfs  $TARGET  tmpfs  rw,uid=$(id -u $SUDO_USER),gid=$(id -g $SUDO_USER),mpol=interleave  0  0" >> /tmp/fstab-$SUDO_USER.$$
mv /tmp/fstab-$SUDO_USER.$$ $(readlink -e /etc/fstab)
sync

#get restore and backup scripts
echo ==== Setting up backup and restore scripts...
cd /usr/bin
rm -f fahbackup fahrestore
download $FAHBACKUP_REPO/fahbackup
download $FAHBACKUP_REPO/fahrestore
chmod +x fahbackup fahrestore

#sanitize initial state -- delete fah directory if empty
echo ==== Checking if fah/tmpfs installations are required...
if [ -d "$TARGET" -a $(find "$TARGET" -mindepth 1 2> /dev/null | wc -l) = "0" ]; then
	umount "$TARGET" 2> /dev/null || true
	rm -r "$TARGET"
fi

if [ -d "$TARGET" ]; then
	#existing installation -- check if we need to migrate to tmpfs
	if ! grep -E "^[^ ]+ $TARGET tmpfs " /proc/mounts > /dev/null ; then
		echo ==== Migrating to tmpfs...
		if fuser -v "$TARGET" > /dev/null ; then
			echo ERROR: "$TARGET" is in use
			fuser -v "$TARGET"
			exit 1
		fi

		su $SUDO_USER -c fahbackup
		sync
		rm -r "$TARGET"
		su $SUDO_USER -c "mkdir \"$TARGET\""
		mount "$TARGET"
		su $SUDO_USER -c fahrestore
	else
		mount "$TARGET" -o remount
	fi
else
	#fresh installation

	#create fah directory
	echo ==== Creating fah directory...
	su $SUDO_USER -c "mkdir \"$TARGET\""
	mount "$TARGET"

	cd "$TARGET"

	#get fah files
	echo ==== Downloading F@H files...
	echo "====     client"
	download "http://www.stanford.edu/group/pandegroup/folding/release/FAH6.34-Linux64-SMP.exe"
	mv FAH6.34-Linux64-SMP.exe fah6
	chmod +x fah6
	for i in a3 a4 a5 ; do
		echo "====     FahCore_$i"
		download http://www.stanford.edu/~pande/Linux/AMD64/beta/Core_$i.fah - | dd skip=1 status=noxfer | bzip2 -cd > FahCore_$i.exe
		echo
	done
	chmod +x FahCore*
	chown -R $SUDO_USER:$(id -g $SUDO_USER) .

	# preconfigure the client
	su $SUDO_USER -c "cat > client.cfg" << EOF
[settings]
username=Anonymous
team=0
passkey=
asknet=no
machineid=1
bigpackets=big
extra_parms=-verbosity 9

[http]
active=no
host=127.0.0.1
port=8080
EOF

	# add -smp/-bigadv as necessary
	CPUS=$(grep -c cpu[0-9] /proc/stat)
	[ $CPUS -gt 1 ] && su $SUDO_USER -c "sed -i 's/^extra_parms.*$/& -smp/' client.cfg"
	[ $CPUS -ge 16 ] && su $SUDO_USER -c "sed -i 's/^extra_parms.*$/& -bigadv/' client.cfg"

	# run configonly if we're on a terminal
	if [ -t 0 ]; then
		echo ==== Running F@H config...
		su $SUDO_USER -c "./fah6 -configonly" || true
		echo
	fi
fi

# create work directory if it doesn't exist
[ ! -d "$TARGET/work" ] && su $SUDO_USER -c "mkdir $TARGET/work"

#
# Allow others (samba) to access work/ directory
#
chmod o+rx "$TARGET"/work

#
# Remove (old) [H]ardOCP-tagged lines from rc.local, if necessary
#
if grep '#\[H]ardOCP' /etc/rc.local > /dev/null 2>&1 ; then
	echo ==== Cleaning-up rc.local \([H]ardOCP\)...
	grep -v '#\[H]ardOCP' /etc/rc.local > /tmp/rclocal-$SUDO_USER.$$
	mv /tmp/rclocal-$SUDO_USER.$$ $(readlink -e /etc/rc.local)
	chmod +x /etc/rc.local
	sync
fi

#
# Remove manually-added fahrestore from rc.local, if necessary
#
if grep 'fahrestore' /etc/rc.local > /dev/null 2>&1 ; then
	echo ==== Cleaning-up rc.local \(fahrestore\)...
	grep -v 'fahrestore' /etc/rc.local > /tmp/rclocal-$SUDO_USER.$$
	mv /tmp/rclocal-$SUDO_USER.$$ $(readlink -e /etc/rc.local)
	chmod +x /etc/rc.local
	sync
fi

#create backup script in /etc/init.d and symlinks
echo ==== Setting up shutdown scripts...
cat > /etc/init.d/fahbackup-rc << EOF
#!/bin/sh -e
### BEGIN INIT INFO
# Provides:          fahbackup-rc
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Restore fah backup on startup and back the client up on shutdown and reboot.
### END INIT INFO
if [ "\$1" = "start" ]; then
	su $SUDO_USER -c fahrestore
	touch /var/lock/subsys/fahbackup-rc || true
	sysctl -w vm.drop_caches=1 || true
	exit 0
fi
if [ "\$1" != "stop" ]; then
	echo Unknown command -- \$1 >&2
	exit 1
fi
su $SUDO_USER -c fahbackup
rm -f /var/lock/subsys/fahbackup-rc
exit 0
EOF
chmod +x /etc/init.d/fahbackup-rc

#
# remove links: first insserv, then rm
#
if which insserv > /dev/null 2>&1 ; then
	insserv -r fahbackup-rc
fi

rm -f /etc/rc*.d/*fahbackup-rc

#
# add links, try insserv if available
#
if which insserv > /dev/null 2>&1 ; then
	insserv fahbackup-rc
else
	ln -fs /etc/init.d/fahbackup-rc /etc/rc0.d/K10fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc1.d/K10fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc6.d/K10fahbackup-rc

	ln -fs /etc/init.d/fahbackup-rc /etc/rc2.d/S90fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc3.d/S90fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc4.d/S90fahbackup-rc
	ln -fs /etc/init.d/fahbackup-rc /etc/rc5.d/S90fahbackup-rc
fi

#set up cron job
echo ==== Setting up cron job...
(crontab -u $SUDO_USER -l 2> /dev/null | grep -v fahbackup || true) > /tmp/cron-$SUDO_USER.$$
echo "00 * * * * fahbackup > /dev/null 2>&1"  >> /tmp/cron-$SUDO_USER.$$
crontab -u $SUDO_USER /tmp/cron-$SUDO_USER.$$
rm /tmp/cron-$SUDO_USER.$$

#install thekraken
echo ==== Installing thekraken...
rm -fr /tmp/thekraken-$SUDO_USER.$$
mkdir /tmp/thekraken-$SUDO_USER.$$
cd /tmp/thekraken-$SUDO_USER.$$
download https://github.com/team33/thekraken/archive/$HARDOCP_BRANCH.tar.gz thekraken-$HARDOCP_BRANCH.tar.gz \
|| download http://darkswarm.org/thekraken/thekraken-$HARDOCP_BRANCH.tar.gz thekraken-$HARDOCP_BRANCH.tar.gz
mkdir src
cd src
tar xzf ../*.tar.gz
cd *
make
make install
rm -r /tmp/thekraken-$SUDO_USER.$$

#wrap cores
echo ==== Wrapping cores...
cd "$TARGET"
su $SUDO_USER -c "thekraken -u" || true
su $SUDO_USER -c "thekraken -i"

#
# Given that systemd recognizes a SysV service only after starting it,
# we need to fahbackup manually here; this means that, on Ubuntu, two
# backups will be performed, one here, and one at reboot
#
echo ==== Client setup done, backing up ...
su $SUDO_USER -c fahbackup

echo ==== Configuring samba...
#
# update smb.conf
#     security = share (no p/w required to connect)
#     usershare max shares = 100 (enable usershares)
#     usershare allow guests = yes
#
testparm -s | grep -Ev '^	security =|^	usershare max shares =|^	usershare allow guests =' | sed -e 's/\[global]/&\n\tsecurity = share\n\tusershare max shares = 100\n\tusershare allow guests = yes/' > /tmp/smbconf-$SUDO_USER.$$
grep selinux /proc/mounts > /dev/null && chcon $(ls --scontext /etc/samba/smb.conf | cut -f 1 -d \ ) /tmp/smbconf-$SUDO_USER.$$
if ! diff /tmp/smbconf-$SUDO_USER.$$ /etc/samba/smb.conf > /dev/null ; then
	cp --preserve /etc/samba/smb.conf /etc/samba/smb.conf-horde-$(date +%s).$$
	mv /tmp/smbconf-$SUDO_USER.$$ $(readlink -e /etc/samba/smb.conf)
	sync
fi

#
# create usershares directory if it doesn't exist
#
if [ ! -d /var/lib/samba/usershares ]; then
	echo ==== Setting up samba usershares, this may take a few minutes ...
	groupadd -f sambashare
	mkdir -m 1770 /var/lib/samba/usershares
	chown root:sambashare /var/lib/samba/usershares
	grep selinux /proc/mounts > /dev/null && chcon $(ls --scontext -d /var/lib/samba | cut -f 1 -d \ ) /var/lib/samba/usershares
	grep selinux /proc/mounts > /dev/null && setsebool -P samba_enable_home_dirs 1
fi

# add the user to usershare group
usermod -a -G $(stat -c %G /var/lib/samba/usershares) $SUDO_USER

#
# restart samba, try Ubuntu, Fedora and Debian ways;
# additionally drop Fedora's 'stop' stdout so user
# doesn't get confused by potential '[FAILED]'
#
echo ==== Restarting samba...
service smbd stop 2> /dev/null || true
service smbd start 2> /dev/null || true
service smb stop 2> /dev/null > /dev/null || true
service smb start 2> /dev/null || true
service samba stop 2> /dev/null || true
service samba start 2> /dev/null || true
sleep 1

echo ==== Setting up fah share...
su $SUDO_USER -c "net usershare add fah \"$TARGET\" \"\" \"Everyone:f\" \"guest_ok=y\""
chmod o+x $(eval echo ~$SUDO_USER)


#get fahdiag
echo ==== Installing fahdiag...
cd /usr/bin
rm -f fahdiag
download $FAHDIAG_REPO/fahdiag
chmod +x fahdiag

# Finishing up...
echo
echo Your IP Address: $(ip route get 8.8.8.8 | sed -ne '{s/^.*src.//;p;q}')
echo Your machine name: $HOSTNAME
echo
echo Done. Reboot your system to complete configuration.
