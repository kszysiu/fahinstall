#!/bin/bash -e
#
# fahinstall 1.1
# Folding@Home install script
# 

usage()
{
	echo Usage:
	echo -e \\t$0 [-U] [-b <branch>]
	echo -e \\t$0 -V
	echo -e \\t$0 -h
}

#
# download a file
# syntax: download <URL> [<output-file-name>]
#
download()
{
	local CURL_PARAM

	[ -z "$1" ] && return 1
	if which wget > /dev/null 2>&1 ; then
		wget -nv ${2:+-O $2} "$1" || return $?
	else
		[ -z "$2" ] && CURL_PARAM="-O" || CURL_PARAM="-o $2"
		curl -f -s -S -R -L $CURL_PARAM "$1" || return $?
	fi
	return 0
}

#
# Parse command-line options
#
OPT_VERSION=
OPT_USAGE=
OPT_NOUPDATE=
OPT_BRANCH=

while [ -n "$1" ]; do
	case $1 in
		(-V)
			OPT_VERSION=1
			shift
			;;
		(-h)
			OPT_USAGE=1
			shift
			;;
		(-U)
			OPT_NOUPDATE=1
			shift
			;;
		(-b)
			shift
			if [ -z "$1" -o "${1:0:1}" = "-" ]; then
				echo ERROR: option -b requires an argument
				exit 1
			fi
			OPT_BRANCH=$1
			shift
			;;
		(-*)
			echo ERROR: invalid option -- $1
			exit 1
			;;
		(*)
			break
			;;
	esac
done

if [ -n "$1" ]; then
	echo ERROR: excess argument -- $1
	exit 1
fi

#
# Set OPT_NORMAL if any regular (non -h -V) options are set
#
[ -n "$OPT_NOUPDATE" ] && OPT_NORMAL=1
[ -n "$OPT_BRANCH" ] && OPT_NORMAL=1

#
# Check for command-line option conflicts
#
if [ -n "$OPT_VERSION$OPT_USAGE$OPT_NORMAL" -a "$OPT_VERSION$OPT_USAGE$OPT_NORMAL" != "1" ]; then
	echo ERROR: conflicting arguments
	exit 1
fi

#
# Process command-line options
#
[ -n "$OPT_USAGE" ] && usage && exit 0
[ -n "$OPT_VERSION" ] && echo fahinstall 1.1 && exit 0
HARDOCP_BRANCH=$OPT_BRANCH

[ -z "$HARDOCP_BRANCH" ] && HARDOCP_BRANCH=released

#
# Configure repositories
#
FAHBACKUP_REPO=https://raw.github.com/team33/fahbackup/$HARDOCP_BRANCH
FAHDIAG_REPO=https://raw.github.com/team33/fahdiag/$HARDOCP_BRANCH
FAHINSTALL_REPO=https://raw.github.com/team33/fahinstall/$HARDOCP_BRANCH

#
# Produce appropriate message on premature exit
#
trap "echo Premature exit." ERR

#
# Impose a requirement on script's name
#
if [ "$(basename $0)" != "fahinstall" ]; then
	echo ERROR: this code needs to be called as \'fahinstall\'
	exit 1
fi

if [ "$(id -ru)" != "0" ]; then
	echo ERROR: need root privileges. Run with sudo.
	exit 1
fi

if [ -n "$OPT_NOUPDATE" ]; then 
	echo ==== Not checking for updates
else
	echo ==== Checking for updates \($HARDOCP_BRANCH\)...
	A=$(download $FAHINSTALL_REPO/fahinstall - | md5sum - | cut -f 1 -d \ )
	B=$(md5sum $0 | cut -f 1 -d \ )
	if [ "$A" != "$B" ]; then
		echo  NOTICE: newer version of fahinstall may be available
		echo "        and will be downloaded automatically"
		echo
		if [ -t 0 ]; then
			echo  Press Ctrl+C to exit or Enter to proceed.
			if ! read I ; then
				exit 1
			fi
		fi
		download $FAHINSTALL_REPO/fahinstall /tmp/$(basename $0)-$SUDO_USER.$$
		mv $0 $0-prev
		cp -a $0-prev $0
		cat /tmp/$(basename $0)-$SUDO_USER.$$ > $0
		rm /tmp/$(basename $0)-$SUDO_USER.$$
		sync
		. $0 -b $HARDOCP_BRANCH
		exit 0
	fi
fi

if [ -z "$SUDO_USER" ]; then
	echo ERROR: SUDO_USER variable not set, cannot continue.
	exit 1
fi

if [ "$SUDO_USER" = "fah" -o "$SUDO_USER" = "root" ]; then
	echo ERROR: user \'$SUDO_USER\' not supported. Create another user and try again.
	exit 1
fi

TARGET=$(eval echo ~$SUDO_USER/fah)


#install software
echo ==== Installing required software...
apt-get install -qq openssh-server screen samba mcelog pastebinit build-essential

#12.04 tweaks
echo ==== Applying 12.04 tweaks...
update-rc.d ondemand disable

#
# Disable irqbalance whenever upstart configuration file is present
#
[ -f /etc/default/irqbalance ] && sed -i -e 's/^ENABLED.*$/ENABLED="0"/' /etc/default/irqbalance && sync

#
# Update sysctl configuration
#
grep -v '#\[H]ardOCP' /etc/sysctl.conf > /tmp/sysctl.conf-$SUDO_USER.$$ || true
mv /tmp/sysctl.conf-$SUDO_USER.$$ $(readlink -e /etc/sysctl.conf)
sync
if [ -d /etc/sysctl.d ]; then
	SYSCTL_CONF=/etc/sysctl.d/99-fah.conf
	echo -n > $SYSCTL_CONF
else
	SYSCTL_CONF=/etc/sysctl.conf
fi
echo "kernel.randomize_va_space=0 #[H]ardOCP" >> $SYSCTL_CONF
echo "kernel.panic=3600 #[H]ardOCP" >> $SYSCTL_CONF
echo "kernel.print-fatal-signals=1 #[H]ardOCP" >> $SYSCTL_CONF
sync

#update fstab
echo ==== Configuring fstab...
grep -v "$TARGET" /etc/fstab > /tmp/fstab-$SUDO_USER.$$
echo "tmpfs  $TARGET  tmpfs  rw,uid=$(id -u $SUDO_USER),gid=$(id -g $SUDO_USER)  0  0" >> /tmp/fstab-$SUDO_USER.$$
mv /tmp/fstab-$SUDO_USER.$$ $(readlink -e /etc/fstab)
sync

#get restore and backup scripts
echo ==== Setting up backup and restore scripts...
cd /usr/bin
rm -f fahbackup fahrestore
download $FAHBACKUP_REPO/fahbackup
download $FAHBACKUP_REPO/fahrestore
chmod +x fahbackup fahrestore

#sanitize initial state -- delete fah directory if empty
echo ==== Checking if fah/tmpfs installations are required...
if [ -d "$TARGET" -a $(find "$TARGET" -mindepth 1 | wc -l) = "0" ]; then
	umount "$TARGET" 2> /dev/null || true
	rm -r "$TARGET"
fi

if [ -d "$TARGET" ]; then
	#existing installation -- check if we need to migrate to tmpfs
	if ! cat /proc/mounts | grep -E "^[^ ]+ $TARGET tmpfs " > /dev/null ; then
		echo ==== Migrating to tmpfs...
		if fuser -v "$TARGET" > /dev/null ; then
			echo ERROR: "$TARGET" is in use
			fuser -v "$TARGET"
			exit 1
		fi

		su $SUDO_USER -c fahbackup
		sync
		rm -r "$TARGET"
		su $SUDO_USER -c "mkdir \"$TARGET\""
		mount "$TARGET"
		su $SUDO_USER -c fahrestore
	fi
else
	#fresh installation

	#create fah directory
	echo ==== Creating fah directory...
	su $SUDO_USER -c "mkdir \"$TARGET\""
	mount "$TARGET"

	#get fah files
	echo ==== Downloading F@H files...
	cd "$TARGET"
	echo "====     client"
	download "http://www.stanford.edu/group/pandegroup/folding/release/FAH6.34-Linux64-SMP.exe"
	mv FAH6.34-Linux64-SMP.exe fah6
	chmod +x fah6
	for i in a3 a4 a5 ; do
		echo "====     FahCore_$i"
		download http://www.stanford.edu/~pande/Linux/AMD64/beta/Core_$i.fah - | dd skip=1 status=noxfer | bzip2 -cd > FahCore_$i.exe
		echo
	done
	chmod +x FahCore*
	chown -R $SUDO_USER:$(id -g $SUDO_USER) .

	#run configonly
	echo ==== Running F@H config...
	su $SUDO_USER -c "./fah6 -configonly" || true
	echo
fi

#update rc.local with fahrestore
echo ==== Updating rc.local...
(head -1 /etc/rc.local
 echo "su $SUDO_USER -c fahrestore #[H]ardOCP"
 echo "sysctl -w vm.drop_caches=1 #[H]ardOCP"
 echo "touch /var/lock/subsys/fahbackup-rc || true #[H]ardOCP"
 tail -n +2 /etc/rc.local | grep -v '#\[H]ardOCP') > /tmp/rclocal-$SUDO_USER.$$
mv /tmp/rclocal-$SUDO_USER.$$ $(readlink -e /etc/rc.local)
chmod +x /etc/rc.local
touch /var/lock/subsys/fahbackup-rc 2> /dev/null || true

#create backup script in /etc/init.d and symlinks
echo ==== Setting up shutdown scripts...
echo "#!/bin/bash" > /etc/init.d/fahbackup-rc
echo "su $SUDO_USER -c fahbackup" >> /etc/init.d/fahbackup-rc
chmod +x /etc/init.d/fahbackup-rc
ln -fs /etc/init.d/fahbackup-rc /etc/rc0.d/K10fahbackup-rc
ln -fs /etc/init.d/fahbackup-rc /etc/rc1.d/K10fahbackup-rc
ln -fs /etc/init.d/fahbackup-rc /etc/rc6.d/K10fahbackup-rc

#set up cron job
echo ==== Setting up cron job...
(crontab -u $SUDO_USER -l 2> /dev/null | grep -v fahbackup || true) > /tmp/cron-$SUDO_USER.$$
echo "00 * * * * fahbackup > /dev/null 2>&1"  >> /tmp/cron-$SUDO_USER.$$
crontab -u $SUDO_USER /tmp/cron-$SUDO_USER.$$
rm /tmp/cron-$SUDO_USER.$$

#install thekraken
echo ==== Installing thekraken...
rm -fr /tmp/thekraken-$SUDO_USER.$$
mkdir /tmp/thekraken-$SUDO_USER.$$
cd /tmp/thekraken-$SUDO_USER.$$
download https://github.com/team33/thekraken/archive/$HARDOCP_BRANCH.tar.gz thekraken-$HARDOCP_BRANCH.tar.gz
mkdir src
cd src
tar xzf ../*.tar.gz
cd *
make
make install
rm -r /tmp/thekraken-$SUDO_USER.$$

#wrap cores
echo ==== Wrapping cores...
cd "$TARGET"
su $SUDO_USER -c "thekraken -u" || true
su $SUDO_USER -c "thekraken -i"

#set up user share
echo ==== Setting up samba...
su $SUDO_USER -c "net usershare add fah \"$TARGET\" \"\" \"Everyone:f\" \"guest_ok=y\""

#update smb.conf - security = share (no p/w required to connect)
cp --preserve /etc/samba/smb.conf /etc/samba/smb.conf-horde-$(date +%s).$$
testparm -s | grep -v '^\tsecurity =' | sed -e 's/\[global]/&\n\tsecurity = share/' > /tmp/smbconf-$SUDO_USER.$$
mv /tmp/smbconf-$SUDO_USER.$$ $(readlink -e /etc/samba/smb.conf)

#get fahdiag
echo ==== Installing fahdiag...
cd /usr/bin
rm -f fahdiag
download $FAHDIAG_REPO/fahdiag
chmod +x fahdiag

# Finishing up...
echo
echo Your IP Address: $(ip route get 8.8.8.8 | sed -ne '{s/^.*src.//;p;q}')
echo Your machine name: $HOSTNAME
echo
echo Done. Please reboot your system now.
